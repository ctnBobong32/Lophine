From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Helvetica Volubi <suisuroru@blue-millennium.fun>
Date: Sun, 3 Aug 2025 15:24:01 +0800
Subject: [PATCH] Leaves: Base Protocol Core

Co-authored by: violetc <58360096+s-yh-china@users.noreply.github.com>
As a part of : Leaves (https://github.com/LeavesMC/Leaves/blob/ea91106ae57fc4cc14e2e0225009cf9919072f7f/leaves-server/minecraft-patches/features/0004-Leaves-Protocol-Core.patch)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/io/papermc/paper/threadedregions/RegionizedServer.java b/io/papermc/paper/threadedregions/RegionizedServer.java
index c39a114c2f5dfef15e18478281106e6abc4fef42..71a26b3a47a7c5798bf2d2902313b74fefa1cfb8 100644
--- a/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -333,6 +333,8 @@ public final class RegionizedServer {
         }
         // Luminol end - Add a config to enable tick command
 
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleTick(tickCount); // Leaves - protocol
+
         // tick connections
         this.tickConnections();
 
diff --git a/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java b/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
index fb263fa1f30a7dfcb7ec2656abfb38e5fe88eac9..56fd1ed7ccaf96e7eedea60fbdbf7f934939d563 100644
--- a/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
+++ b/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
@@ -40,13 +40,22 @@ public interface CustomPacketPayload {
 
             @Override
             public void encode(B buffer, CustomPacketPayload value) {
+                // Leaves start - protocol core
+                if (value instanceof org.leavesmc.leaves.protocol.core.LeavesCustomPayload payload) {
+                    org.leavesmc.leaves.protocol.core.LeavesProtocolManager.encode(buffer, payload);
+                    return;
+                }
+                // Leaves end - protocol core
                 this.writeCap(buffer, value.type(), value);
             }
 
             @Override
             public CustomPacketPayload decode(B buffer) {
                 ResourceLocation resourceLocation = buffer.readResourceLocation();
-                return (CustomPacketPayload)this.findCodec(resourceLocation).decode(buffer);
+                // Leaves start - protocol core
+                var payload = org.leavesmc.leaves.protocol.core.LeavesProtocolManager.decode(resourceLocation, buffer);
+                return java.util.Objects.requireNonNullElseGet(payload, () -> this.findCodec(resourceLocation).decode(buffer));
+                // Leaves end - protocol core
             }
         };
     }
diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index 8150b16c196edcb226be9268ea6e0012e44517fa..c54bf0429c0ca3a35a730658c7b1b3ddc776bf9e 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -57,6 +57,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     public @Nullable String playerBrand;
     public final java.util.Set<String> pluginMessagerChannels;
     // Paper end - retain certain values
+    public final GameProfile profile; // Leaves - protocol core
 
     public ServerCommonPacketListenerImpl(MinecraftServer server, Connection connection, CommonListenerCookie cookie) {
         this.server = server;
@@ -70,6 +71,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         this.pluginMessagerChannels = cookie.channels();
         this.keepAlive = cookie.keepAlive();
         // Paper end
+        this.profile = cookie.gameProfile(); // Leaves - protocol core
     }
 
     // Paper start - configuration phase API
@@ -160,6 +162,18 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
+        // Leaves start - protocol
+        if (packet.payload() instanceof org.leavesmc.leaves.protocol.core.LeavesCustomPayload leavesPayload) {
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePayload(org.leavesmc.leaves.protocol.core.ProtocolUtils.createSelector(this), leavesPayload);
+            return;
+        }
+        if (packet.payload() instanceof net.minecraft.network.protocol.common.custom.DiscardedPayload(net.minecraft.resources.ResourceLocation id, byte[] data)) {
+            if (org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleBytebuf(org.leavesmc.leaves.protocol.core.ProtocolUtils.createSelector(this), id, io.netty.buffer.Unpooled.wrappedBuffer(data))) {
+                return;
+            }
+        }
+        // Leaves end - protocol
+
         // Paper start
         if (!(packet.payload() instanceof final net.minecraft.network.protocol.common.custom.DiscardedPayload discardedPayload)) {
             return;
@@ -219,10 +233,11 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         final String channel = new String(data, from, length, java.nio.charset.StandardCharsets.US_ASCII);
         if (register) {
             bridge.addChannel(channel);
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleMinecraftRegister(channel, org.leavesmc.leaves.protocol.core.ProtocolUtils.createSelector(this)); // Leaves - protocol
         } else {
             bridge.removeChannel(channel);
         }
-    // Paper end
+        // Paper end
     }
 
     @Override
@@ -385,9 +400,9 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
             net.minecraft.server.level.ServerPlayer player = serverGamePacketListener.player;
             org.bukkit.event.player.PlayerKickEvent.Cause cause = disconnectionDetails.disconnectionReason().orElseThrow().game().orElse(org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN);
             org.bukkit.event.player.PlayerKickEvent event = new org.bukkit.event.player.PlayerKickEvent(
-                    player.getBukkitEntity(),
-                    io.papermc.paper.adventure.PaperAdventure.asAdventure(disconnectionDetails.reason()),
-                    rawLeaveMessage, cause
+                player.getBukkitEntity(),
+                io.papermc.paper.adventure.PaperAdventure.asAdventure(disconnectionDetails.reason()),
+                rawLeaveMessage, cause
 
             );
 
@@ -420,10 +435,10 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
 
     private void disconnect0(DisconnectionDetails disconnectionDetails) {
         this.connection
-                .send(
-                        new ClientboundDisconnectPacket(disconnectionDetails.reason()),
-                        PacketSendListener.thenRun(() -> this.connection.disconnect(disconnectionDetails))
-                );
+            .send(
+                new ClientboundDisconnectPacket(disconnectionDetails.reason()),
+                PacketSendListener.thenRun(() -> this.connection.disconnect(disconnectionDetails))
+            );
         this.onDisconnect(disconnectionDetails);
         this.connection.setReadOnly();
         // CraftBukkit - Don't wait
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index 4ef2816210f06082f2209c51d04aad6bb188232b..593dbcda4b497291eb1ecdc64b947a8d279f8be6 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -423,6 +423,8 @@ public abstract class PlayerList {
                 //return; // Folia - region threading - must still allow the player to connect, as we must add to chunk map before handling disconnect
             }
 
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerJoin(player);
+
             final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
             if (jm != null && !jm.equals(net.kyori.adventure.text.Component.empty())) { // Paper - Adventure
@@ -605,6 +607,7 @@ public abstract class PlayerList {
         return this.remove(player, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? player.getBukkitEntity().displayName() : io.papermc.paper.adventure.PaperAdventure.asAdventure(player.getDisplayName())));
     }
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player, net.kyori.adventure.text.Component leaveMessage) {
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerLeave(player); // Leaves - protocol
         // Paper end - Fix kick event leave message not being sent
         ServerLevel serverLevel = player.level();
         player.awardStat(Stats.LEAVE_GAME);
@@ -1520,6 +1523,7 @@ public abstract class PlayerList {
             serverPlayer.connection.send(clientboundUpdateRecipesPacket);
             serverPlayer.getRecipeBook().sendInitialRecipeBook(serverPlayer);
         }
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleDataPackReload(); // Leaves - protocol core
     }
 
     public boolean isAllowCommandsForAllPlayers() {
