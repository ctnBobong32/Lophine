From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Helvetica Volubi <suisuroru@blue-millennium.fun>
Date: Sat, 26 Jul 2025 01:11:54 +0800
Subject: [PATCH] Leaves: Item overstack util

Co-authored by: violetc <58360096+s-yh-china@users.noreply.github.com>
As a part of : Leaves (https://github.com/LeavesMC/Leaves/blob/46cccfc39cafbca1681620d03947bc3ad558327f/leaves-server/minecraft-patches/features/0034-Item-overstack-util.patch)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/net/minecraft/commands/arguments/item/ItemInput.java b/net/minecraft/commands/arguments/item/ItemInput.java
index 643797124fe5a4489d0b7419b7e600c04f283ef2..04b4100da96aad50f08e8c59200eec934e7e873d 100644
--- a/net/minecraft/commands/arguments/item/ItemInput.java
+++ b/net/minecraft/commands/arguments/item/ItemInput.java
@@ -39,11 +39,13 @@ public class ItemInput {
     public ItemStack createItemStack(int count, boolean allowOversizedStacks) throws CommandSyntaxException {
         ItemStack itemStack = new ItemStack(this.item, count);
         itemStack.applyComponents(this.components);
-        if (allowOversizedStacks && count > itemStack.getMaxStackSize()) {
-            throw ERROR_STACK_TOO_BIG.create(this.getItemName(), itemStack.getMaxStackSize());
+        // Leaves start - item over-stack util
+        if (allowOversizedStacks && count > org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack)) {
+            throw ERROR_STACK_TOO_BIG.create(this.getItemName(), org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack));
         } else {
             return itemStack;
         }
+        // Leaves end - item over-stack util
     }
 
     public String serialize(HolderLookup.Provider levelRegistry) {
diff --git a/net/minecraft/server/commands/GiveCommand.java b/net/minecraft/server/commands/GiveCommand.java
index f7002d6752aa03603eb06e298ba1d7130cf13826..72c87f7c0392d087440db9d267a608598f6feb6d 100644
--- a/net/minecraft/server/commands/GiveCommand.java
+++ b/net/minecraft/server/commands/GiveCommand.java
@@ -55,7 +55,7 @@ public class GiveCommand {
     private static int giveItem(CommandSourceStack source, ItemInput item, Collection<ServerPlayer> targets, int count) throws CommandSyntaxException {
         ItemStack itemStack = item.createItemStack(1, false);
         final Component displayName = itemStack.getDisplayName(); // Paper - get display name early
-        int maxStackSize = itemStack.getMaxStackSize();
+        int maxStackSize = org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack); // Leaves - item over-stack util
         int i = maxStackSize * 100;
         if (count > i) {
             source.sendFailure(Component.translatable("commands.give.failed.toomanyitems", i, itemStack.getDisplayName()));
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d74a05822c6c145971dc526a62d652d35b4f5d9d..d63d8f7523938088bf9efc1c1b8ad9f0583338bb 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3079,7 +3079,7 @@ public class ServerGamePacketListenerImpl
                                             } else if (slot.mayPlace(cursor)) {
                                                 if (ItemStack.isSameItemSameComponents(clickedItem, cursor)) {
                                                     int toPlace = packet.buttonNum() == 0 ? cursor.getCount() : 1;
-                                                    toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
+                                                    toPlace = Math.min(toPlace, org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(clickedItem) - clickedItem.getCount()); // Leaves - item over-stack util
                                                     toPlace = Math.min(toPlace, slot.container.getMaxStackSize() - clickedItem.getCount());
                                                     if (toPlace == 1) {
                                                         action = InventoryAction.PLACE_ONE;
@@ -3115,7 +3115,7 @@ public class ServerGamePacketListenerImpl
                                                 }
                                             } else if (ItemStack.isSameItemSameComponents(cursor, clickedItem)) {
                                                 if (clickedItem.getCount() >= 0) {
-                                                    if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                    if (clickedItem.getCount() + cursor.getCount() <= org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(cursor)) { // Leaves - item over-stack util
                                                         // As of 1.5, this is result slots only
                                                         action = InventoryAction.PICKUP_ALL;
                                                     }
@@ -3326,6 +3326,7 @@ public class ServerGamePacketListenerImpl
                         this.player.containerMenu.broadcastFullState();
                     } else {
                         this.player.containerMenu.broadcastChanges();
+                        if (org.leavesmc.leaves.util.ItemOverstackUtils.hasOverstackingItem()) this.player.containerMenu.broadcastCarriedItem(); // Leaves - item over-stack util - force send carried item
                     }
                     if (packet.buttonNum() == Inventory.SLOT_OFFHAND && this.player.containerMenu != this.player.inventoryMenu) this.player.containerSynchronizer.sendOffHandSlotChange(); // Paper - update offhand data when the player is clicking in an inventory not their own as the sychronizer does not include offhand slots
                     if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.updateEquipmentOnPlayerActions) this.player.detectEquipmentUpdates(); // Paper - Force update attributes.
@@ -3437,7 +3438,7 @@ public class ServerGamePacketListenerImpl
             }
 
             boolean flag1 = packet.slotNum() >= 1 && packet.slotNum() <= 45;
-            boolean flag2 = itemStack.isEmpty() || itemStack.getCount() <= itemStack.getMaxStackSize();
+            boolean flag2 = itemStack.isEmpty() || itemStack.getCount() <= org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack); // Leaves - item over-stack util
             if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.slotNum()).getItem(), packet.itemStack()))) { // Insist on valid slot
                 // CraftBukkit start - Call click event
                 org.bukkit.inventory.InventoryView inventory = this.player.inventoryMenu.getBukkitView();
@@ -3479,6 +3480,7 @@ public class ServerGamePacketListenerImpl
                 this.player.inventoryMenu.getSlot(packet.slotNum()).setByPlayer(itemStack);
                 this.player.inventoryMenu.setRemoteSlot(packet.slotNum(), itemStack);
                 this.player.inventoryMenu.broadcastChanges();
+                if (org.leavesmc.leaves.util.ItemOverstackUtils.hasOverstackingItem()) this.player.containerMenu.sendSingleSlot(packet.slotNum(), itemStack); // Leaves - item over-stack util - force send carried item
                 if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.updateEquipmentOnPlayerActions) this.player.detectEquipmentUpdates(); // Paper - Force update attributes.
             } else if (flag && flag2) {
                 if (this.dropSpamThrottler.isUnderThreshold()) {
diff --git a/net/minecraft/world/Container.java b/net/minecraft/world/Container.java
index 2afaf6a3f18af7889f4f3b35cee9bbb5e4ec01f2..da99b4bc7fe8460945070915073be141f9bd6778 100644
--- a/net/minecraft/world/Container.java
+++ b/net/minecraft/world/Container.java
@@ -32,6 +32,12 @@ public interface Container extends Clearable, Iterable<ItemStack>, org.leavesmc.
         return Math.min(this.getMaxStackSize(), stack.getMaxStackSize());
     }
 
+    // Leaves start - item over-stack util
+    default int getMaxStackLeaves(ItemStack stack) {
+        return Math.min(this.getMaxStackSize(), org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack));
+    }
+    // Leaves end - item over-stack util
+
     void setChanged();
 
     boolean stillValid(Player player);
diff --git a/net/minecraft/world/SimpleContainer.java b/net/minecraft/world/SimpleContainer.java
index d907e24d563e27acab2f2bf9711b1755ea9afd19..75170c8d3be477a6ea2a1d62018a6ab630b0e54e 100644
--- a/net/minecraft/world/SimpleContainer.java
+++ b/net/minecraft/world/SimpleContainer.java
@@ -211,7 +211,7 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     @Override
     public void setItem(int index, ItemStack stack) {
         this.items.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
         this.setChanged();
     }
 
@@ -286,7 +286,7 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     }
 
     private void moveItemsBetweenStacks(ItemStack stack, ItemStack other) {
-        int maxStackSize = this.getMaxStackSize(other);
+        int maxStackSize = this.getMaxStackLeaves(other); // Leaves - item over-stack util
         int min = Math.min(stack.getCount(), maxStackSize - other.getCount());
         if (min > 0) {
             other.grow(min);
diff --git a/net/minecraft/world/entity/item/ItemEntity.java b/net/minecraft/world/entity/item/ItemEntity.java
index fd4f1e63f980b6959fc80084651991f8f8bc6c34..e5e8c752129a6ebb0dd1315c9b8ec459be11ef07 100644
--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -283,10 +283,15 @@ public class ItemEntity extends Entity implements TraceableEntity, ChangePublish
 
     private boolean isMergable() {
         ItemStack item = this.getItem();
-        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.despawnRate && item.getCount() < item.getMaxStackSize(); // Paper - Alternative item-despawn-rate
+        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.despawnRate && item.getCount() < org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(item); // Paper - Alternative item-despawn-rate // Leaves - item over-stack util
     }
 
     private void tryToMerge(ItemEntity itemEntity) {
+        // Leaves start - item over-stack util
+        if (org.leavesmc.leaves.util.ItemOverstackUtils.tryStackItems(this, itemEntity)) {
+            return;
+        }
+        // Leaves end - item over-stack util
         ItemStack item = this.getItem();
         ItemStack item1 = itemEntity.getItem();
         if (Objects.equals(this.target, itemEntity.target) && areMergable(item, item1)) {
diff --git a/net/minecraft/world/entity/player/Inventory.java b/net/minecraft/world/entity/player/Inventory.java
index a6bb436dc80daf6901dc027a6011ead4b3ed27e2..71df58ae26325a2d28b6679733c474c0c59f7654 100644
--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -165,10 +165,12 @@ public class Inventory implements Container, Nameable {
     }
 
     private boolean hasRemainingSpaceForItem(ItemStack destination, ItemStack origin) {
+        // Leaves start - item over-stack util
         return !destination.isEmpty()
-            && destination.isStackable()
-            && destination.getCount() < this.getMaxStackSize(destination)
+            && org.leavesmc.leaves.util.ItemOverstackUtils.isStackable(destination)
+            && destination.getCount() < org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(destination)
             && ItemStack.isSameItemSameComponents(destination, origin); // Paper - check if itemstack is stackable first
+        // Leaves end - item over-stack util
     }
 
     // CraftBukkit start - Watch method above! :D
@@ -181,7 +183,7 @@ public class Inventory implements Container, Nameable {
             }
 
             if (this.hasRemainingSpaceForItem(itemInSlot, itemStack)) {
-                remains -= (itemInSlot.getMaxStackSize() < this.getMaxStackSize() ? itemInSlot.getMaxStackSize() : this.getMaxStackSize()) - itemInSlot.getCount();
+                remains -= (org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemInSlot) < this.getMaxStackSize() ? org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemInSlot) : this.getMaxStackSize()) - itemInSlot.getCount(); // Leaves - item over-stack util
             }
             if (remains <= 0) {
                 return itemStack.getCount();
@@ -190,7 +192,7 @@ public class Inventory implements Container, Nameable {
 
         ItemStack itemInOffhand = this.equipment.get(EquipmentSlot.OFFHAND);
         if (this.hasRemainingSpaceForItem(itemInOffhand, itemStack)) {
-            remains -= (itemInOffhand.getMaxStackSize() < this.getMaxStackSize() ? itemInOffhand.getMaxStackSize() : this.getMaxStackSize()) - itemInOffhand.getCount();
+            remains -= (org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemInOffhand) < this.getMaxStackSize() ? org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemInOffhand) : this.getMaxStackSize()) - itemInOffhand.getCount(); // Leaves - item over-stack util
         }
         if (remains <= 0) {
             return itemStack.getCount();
@@ -314,7 +316,7 @@ public class Inventory implements Container, Nameable {
             this.setItem(slot, item);
         }
 
-        int i = this.getMaxStackSize(item) - item.getCount();
+        int i = this.getMaxStackLeaves(item) - item.getCount(); // Leaves - item over-stack util
         int min = Math.min(count, i);
         if (min == 0) {
             return count;
@@ -420,7 +422,7 @@ public class Inventory implements Container, Nameable {
                 break;
             }
 
-            int i = stack.getMaxStackSize() - this.getItem(slotWithRemainingSpace).getCount();
+            int i = org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack) - this.getItem(slotWithRemainingSpace).getCount(); // Leaves - item over-stack util
             if (this.add(slotWithRemainingSpace, stack.split(i)) && sendPacket && this.player instanceof ServerPlayer serverPlayer) {
                 serverPlayer.connection.send(this.createInventoryUpdatePacket(slotWithRemainingSpace));
             }
diff --git a/net/minecraft/world/entity/player/StackedItemContents.java b/net/minecraft/world/entity/player/StackedItemContents.java
index 83ccde54c625d40dc595e000c533f60aa929bd5a..6779503888e6d311758cffde582b0efbd66a33de 100644
--- a/net/minecraft/world/entity/player/StackedItemContents.java
+++ b/net/minecraft/world/entity/player/StackedItemContents.java
@@ -23,7 +23,7 @@ public class StackedItemContents {
     }
 
     public void accountStack(ItemStack stack) {
-        this.accountStack(stack, stack.getMaxStackSize());
+        this.accountStack(stack, org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack)); // Leaves - item over-stack util
     }
 
     public void accountStack(ItemStack stack, int maxStackSize) {
diff --git a/net/minecraft/world/entity/vehicle/ContainerEntity.java b/net/minecraft/world/entity/vehicle/ContainerEntity.java
index 02d2efef2dc0f0e12eac0c71fa290af706f7694d..99f109e2653eff10c011f380694bd77a76381cee 100644
--- a/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -163,7 +163,7 @@ public interface ContainerEntity extends Container, MenuProvider {
     default void setChestVehicleItem(int slot, ItemStack stack) {
         this.unpackChestVehicleLootTable(null);
         this.getItemStacks().set(slot, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
     }
 
     default SlotAccess getChestVehicleSlot(final int index) {
diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index fcb2e0a722ed94acf08da06f06b20f42652896bc..9489a50df2de3d641235153c5a0217d96c1f4fa9 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -295,6 +295,13 @@ public abstract class AbstractContainerMenu {
         this.sendAllDataToRemote();
     }
 
+    // Leaves start - item over-stack util
+    public void sendSingleSlot(int slotIndex, ItemStack item) {
+        if (this.synchronizer != null) {
+            this.synchronizer.sendSlotChange(this, slotIndex, item);
+        }
+    }
+    // Leaves end - item over-stack util
     private void updateDataSlotListeners(int slotIndex, int value) {
         for (ContainerListener containerListener : this.containerListeners) {
             containerListener.dataChanged(this, slotIndex, value);
@@ -451,7 +458,7 @@ public abstract class AbstractContainerMenu {
                             && (this.quickcraftType == 2 || carried1.getCount() >= this.quickcraftSlots.size())
                             && this.canDragTo(slot1)) {
                             int i2 = slot1.hasItem() ? slot1.getItem().getCount() : 0;
-                            int min = Math.min(itemStack.getMaxStackSize(), slot1.getMaxStackSize(itemStack));
+                            int min = Math.min(org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack), slot1.getMaxStackSize(itemStack)); // Leaves - item over-stack util
                             int min1 = Math.min(getQuickCraftPlaceCount(this.quickcraftSlots, this.quickcraftType, itemStack) + i2, min);
                             count -= min1 - i2;
                             // slot1.setByPlayer(itemStack.copyWithCount(min1));
@@ -563,7 +570,7 @@ public abstract class AbstractContainerMenu {
                                 slot.setByPlayer(carried2);
                             }
                         } else if (ItemStack.isSameItemSameComponents(carried, carried2)) {
-                            Optional<ItemStack> optional1 = slot.tryRemove(carried.getCount(), carried2.getMaxStackSize() - carried2.getCount(), player);
+                            Optional<ItemStack> optional1 = slot.tryRemove(carried.getCount(), org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(carried2) - carried2.getCount(), player); // Leaves - item over-stack util
                             optional1.ifPresent(itemStack2 -> {
                                 carried2.grow(itemStack2.getCount());
                                 slot.onTake(player, itemStack2);
@@ -625,7 +632,7 @@ public abstract class AbstractContainerMenu {
             Slot slot2 = this.slots.get(slotId);
             if (slot2.hasItem()) {
                 ItemStack itemStack = slot2.getItem();
-                this.setCarried(itemStack.copyWithCount(itemStack.getMaxStackSize()));
+                this.setCarried(itemStack.copyWithCount(org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack))); // Leaves - item over-stack util
             }
         } else if (clickType == ClickType.THROW && this.getCarried().isEmpty() && slotId >= 0) {
             Slot slot2 = this.slots.get(slotId);
@@ -656,15 +663,15 @@ public abstract class AbstractContainerMenu {
                 int maxStackSize = button == 0 ? 1 : -1;
 
                 for (int i3 = 0; i3 < 2; i3++) {
-                    for (int i4 = count; i4 >= 0 && i4 < this.slots.size() && itemStack.getCount() < itemStack.getMaxStackSize(); i4 += maxStackSize) {
+                    for (int i4 = count; i4 >= 0 && i4 < this.slots.size() && itemStack.getCount() < org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack); i4 += maxStackSize) { // Leaves - item over-stack util
                         Slot slot3 = this.slots.get(i4);
                         if (slot3.hasItem()
                             && canItemQuickReplace(slot3, itemStack, true)
                             && slot3.mayPickup(player)
                             && this.canTakeItemForPickAll(itemStack, slot3)) {
                             ItemStack item1 = slot3.getItem();
-                            if (i3 != 0 || item1.getCount() != item1.getMaxStackSize()) {
-                                ItemStack itemStack1 = slot3.safeTake(item1.getCount(), itemStack.getMaxStackSize() - itemStack.getCount(), player);
+                            if (i3 != 0 || item1.getCount() != org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(item1)) { // Leaves - item over-stack util
+                                ItemStack itemStack1 = slot3.safeTake(item1.getCount(), org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack) - itemStack.getCount(), player); // Leaves - item over-stack util
                                 itemStack.grow(itemStack1.getCount());
                             }
                         }
@@ -766,7 +773,7 @@ public abstract class AbstractContainerMenu {
             i = endIndex - 1;
         }
 
-        if (stack.isStackable()) {
+        if (org.leavesmc.leaves.util.ItemOverstackUtils.isStackable(stack)) { // Leaves - item over-stack util
             while (!stack.isEmpty() && (reverseDirection ? i >= startIndex : i < endIndex)) {
                 Slot slot = this.slots.get(i);
                 ItemStack item = slot.getItem();
@@ -867,7 +874,7 @@ public abstract class AbstractContainerMenu {
     public static boolean canItemQuickReplace(@Nullable Slot slot, ItemStack stack, boolean stackSizeMatters) {
         boolean flag = slot == null || !slot.hasItem();
         return !flag && ItemStack.isSameItemSameComponents(stack, slot.getItem())
-            ? slot.getItem().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize()
+            ? slot.getItem().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack) // Leaves - item over-stack util
             : flag;
     }
 
@@ -875,7 +882,7 @@ public abstract class AbstractContainerMenu {
         return switch (type) {
             case 0 -> Mth.floor((float)stack.getCount() / slots.size());
             case 1 -> 1;
-            case 2 -> stack.getMaxStackSize();
+            case 2 -> org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack); // Leaves - item over-stack util
             default -> stack.getCount();
         };
     }
@@ -898,7 +905,7 @@ public abstract class AbstractContainerMenu {
             for (int i = 0; i < container.getContainerSize(); i++) {
                 ItemStack item = container.getItem(i);
                 if (!item.isEmpty()) {
-                    f += (float)item.getCount() / container.getMaxStackSize(item);
+                    f += Math.clamp((float) item.getCount() / container.getMaxStackSize(item), 0f, 1f); // Leaves - item over-stack util
                 }
             }
 
diff --git a/net/minecraft/world/inventory/MerchantContainer.java b/net/minecraft/world/inventory/MerchantContainer.java
index 1e5dfb1f9e371fa23cdfa9280797aa0e183d4cd2..1a593d5bfc4574fd071604105422cd1d395648b8 100644
--- a/net/minecraft/world/inventory/MerchantContainer.java
+++ b/net/minecraft/world/inventory/MerchantContainer.java
@@ -109,7 +109,7 @@ public class MerchantContainer implements Container {
     @Override
     public void setItem(int index, ItemStack stack) {
         this.itemStacks.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
         if (this.isPaymentSlot(index)) {
             this.updateSellItem();
         }
diff --git a/net/minecraft/world/inventory/Slot.java b/net/minecraft/world/inventory/Slot.java
index 5ceb8964476b40db4511bec91ff13c4f522a1357..f416d7976e41a06b5a8be93485eaa233ffceda5c 100644
--- a/net/minecraft/world/inventory/Slot.java
+++ b/net/minecraft/world/inventory/Slot.java
@@ -75,7 +75,7 @@ public class Slot {
     }
 
     public int getMaxStackSize(ItemStack stack) {
-        return Math.min(this.getMaxStackSize(), stack.getMaxStackSize());
+        return Math.min(this.getMaxStackSize(), org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(stack)); // Leaves - item over-stack util
     }
 
     @Nullable
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 33c3a5e39e8e1aa023baab76ef94f8aed481480e..a27e1d53abc2d8b8912226add33510067e10ed52 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -166,7 +166,7 @@ public final class ItemStack implements DataComponentHolder, ChangePublisher<net
     @Deprecated
     @Nullable
     private Item item;
-    PatchedDataComponentMap components;
+    public PatchedDataComponentMap components; // Leaves - item over-stack util
     @Nullable
     private Entity entityRepresentation;
 
@@ -193,7 +193,8 @@ public final class ItemStack implements DataComponentHolder, ChangePublisher<net
                 } else {
                     Holder<Item> holder = Item.STREAM_CODEC.decode(buffer);
                     DataComponentPatch dataComponentPatch = codec.decode(buffer);
-                    return new ItemStack(holder, varInt, dataComponentPatch);
+                    ItemStack itemStack = new ItemStack(holder, varInt, dataComponentPatch);
+                    return org.leavesmc.leaves.util.ItemOverstackUtils.decodeMaxStackSize(itemStack);
                 }
             }
 
@@ -202,13 +203,15 @@ public final class ItemStack implements DataComponentHolder, ChangePublisher<net
                 if (value.isEmpty() || value.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
                     buffer.writeVarInt(0);
                 } else {
-                    buffer.writeVarInt(io.papermc.paper.util.sanitizer.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.sanitizer.ItemObfuscationSession.currentSession(), value, value.getCount())); // Paper - potentially sanitize count
-                    Item.STREAM_CODEC.encode(buffer, value.getItemHolder());
+                    // Leaves start - item over-stack util
+                    final ItemStack itemStack = org.leavesmc.leaves.util.ItemOverstackUtils.encodeMaxStackSize(value.copy());
+                    buffer.writeVarInt(io.papermc.paper.util.sanitizer.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.sanitizer.ItemObfuscationSession.currentSession(), itemStack, itemStack.getCount())); // Paper - potentially sanitize count
+                    Item.STREAM_CODEC.encode(buffer, itemStack.getItemHolder());
                     // Paper start - adventure; conditionally render translatable components
                     boolean prev = net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
-                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(itemStack))) { // pass the itemstack as context to the obfuscation session
                         net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
-                    codec.encode(buffer, value.components.asPatch());
+                    codec.encode(buffer, itemStack.components.asPatch());
                     } finally {
                         net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prev);
                     }
@@ -303,7 +306,7 @@ public final class ItemStack implements DataComponentHolder, ChangePublisher<net
 
             for (ItemStack itemStack : itemContainerContents.nonEmptyItems()) {
                 int count = itemStack.getCount();
-                int maxStackSize = itemStack.getMaxStackSize();
+                int maxStackSize = org.leavesmc.leaves.util.ItemOverstackUtils.getItemStackMaxCount(itemStack); // Leaves - item over-stack util
                 if (count > maxStackSize) {
                     return DataResult.error(() -> "Item stack with count of " + count + " was larger than maximum: " + maxStackSize);
                 }
diff --git a/net/minecraft/world/level/block/CrafterBlock.java b/net/minecraft/world/level/block/CrafterBlock.java
index 38b03c7b02bdfc579e5e126c12de3d878e26d188..caf31218a1aff84367da126ee1dc46b8c8a1e5d1 100644
--- a/net/minecraft/world/level/block/CrafterBlock.java
+++ b/net/minecraft/world/level/block/CrafterBlock.java
@@ -192,7 +192,7 @@ public class CrafterBlock extends BaseEntityBlock {
         Direction direction = state.getValue(ORIENTATION).front();
         Container containerAt = HopperBlockEntity.getContainerAt(level, pos.relative(direction));
         ItemStack itemStack = stack.copy();
-        if (containerAt != null && (containerAt instanceof CrafterBlockEntity || stack.getCount() > containerAt.getMaxStackSize(stack))) {
+        if (containerAt != null && (containerAt instanceof CrafterBlockEntity || stack.getCount() > containerAt.getMaxStackLeaves(stack))) { // Leaves - item over-stack util
             // CraftBukkit start - InventoryMoveItemEvent
             org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemStack);
 
diff --git a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index d7a211220d5eba7e34b9083f06f39e9527962599..cef2d6d9a42ae36d6e2a0b31685a7738d2a400cf 100644
--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -411,7 +411,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         ItemStack itemStack = this.items.get(index);
         boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameComponents(itemStack, stack);
         this.items.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
         if (index == 0 && !flag && this.level instanceof ServerLevel serverLevel) {
             this.cookingTotalTime = getTotalCookTime(serverLevel, this, this.recipeType, this.cookSpeedMultiplier); // Paper - cook speed multiplier API
             this.cookingTimer = 0;
diff --git a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index 10b2cc20bbf3b70e4e09dbbe14b90506e6366158..1535bb8cec8692e8d26eaff090288f1b8f75c253 100644
--- a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -155,7 +155,7 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
     @Override
     public void setItem(int slot, ItemStack stack) {
         this.getItems().set(slot, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
         this.setChanged();
     }
 
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 2f8128a11e316a6ee6b283f9a411096e582c03b7..5b93eeba6c03738011551ce18332cebe9e278a8e 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -145,7 +145,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public void setItem(int index, ItemStack stack) {
         this.unpackLootTable(null);
         this.getItems().set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - item over-stack util
     }
 
     @Override
@@ -742,9 +742,9 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             if (item.isEmpty()) {
                 // Spigot start - SPIGOT-6693, SimpleContainer#setItem
                 ItemStack leftover = ItemStack.EMPTY; // Paper - Make hoppers respect inventory max stack size
-                if (!stack.isEmpty() && stack.getCount() > destination.getMaxStackSize()) {
+                if (!stack.isEmpty() && (stack.getCount() > destination.getMaxStackSize() || stack.getCount() > stack.getMaxStackSize())) { // Leaves - item over-stack util
                     leftover = stack; // Paper - Make hoppers respect inventory max stack size
-                    stack = stack.split(destination.getMaxStackSize());
+                    stack = stack.split(Math.min(destination.getMaxStackSize(), stack.getMaxStackSize())); // Leaves - item over-stack util
                 }
                 // Spigot end
                 //IGNORE_TILE_UPDATES.set(Boolean.TRUE); // Paper - Perf: Optimize Hoppers // Folia - region threading // Luminol - Use vanilla hopper logic
