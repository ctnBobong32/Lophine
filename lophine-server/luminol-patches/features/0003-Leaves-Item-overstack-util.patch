From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Helvetica Volubi <suisuroru@blue-millennium.fun>
Date: Wed, 13 Aug 2025 22:23:46 +0800
Subject: [PATCH] Leaves: Item overstack util

Co-authored by: violetc <58360096+s-yh-china@users.noreply.github.com>
As a part of : Leaves (https://github.com/LeavesMC/Leaves/blob/d93e9766d3797d130f66179e70a1b374c546fef7/leaves-server/src/main/java/org/leavesmc/leaves/util/ItemOverstackUtils.java)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/src/main/java/org/leavesmc/leaves/util/ItemOverstackUtils.java b/src/main/java/org/leavesmc/leaves/util/ItemOverstackUtils.java
index 5995c499298454a060433746c64be5fcc8d202e2..3452399de0fa464ce04a7cf1a05b440346bef662 100644
--- a/src/main/java/org/leavesmc/leaves/util/ItemOverstackUtils.java
+++ b/src/main/java/org/leavesmc/leaves/util/ItemOverstackUtils.java
@@ -17,29 +17,30 @@
 
 package org.leavesmc.leaves.util;
 
+import fun.bm.lophine.config.modules.misc.ContainerExpansionConfig;
 //import io.papermc.paper.datacomponent.DataComponentTypes;
 //import io.papermc.paper.datacomponent.item.ItemEnchantments;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.entity.item.ItemEntity;
-//import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.component.CustomData;
-//import net.minecraft.world.item.component.ItemContainerContents;
-//import net.minecraft.world.level.block.ShulkerBoxBlock;
+import net.minecraft.world.item.component.ItemContainerContents;
+import net.minecraft.world.level.block.ShulkerBoxBlock;
 //import org.bukkit.enchantments.Enchantment;
-//import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.NotNull;
 //import org.leavesmc.leaves.LeavesConfig;
 
 import java.util.List;
-//import java.util.Objects;
+import java.util.Objects;
 import java.util.Optional;
 
 public class ItemOverstackUtils {
 
     private static final List<ItemUtil> overstackUtils = List.of(
-/*        new ShulkerBox(),
-        new CurseEnchantedBook()*/
+            new ShulkerBox()
+            // new CurseEnchantedBook() // only use shulker box part
     );
 
     public static int getItemStackMaxCount(ItemStack stack) {
@@ -109,6 +110,7 @@ public class ItemOverstackUtils {
 
     public static float getItemStackSignalStrength(int maxStackSize, ItemStack itemStack) {
         float result = (float) itemStack.getCount() / Math.min(maxStackSize, itemStack.getMaxStackSize());
+        // only use shulker box part
 /*        if (LeavesConfig.modify.oldMC.allowGrindstoneOverstacking && CurseEnchantedBook.isCursedEnchantedBook(itemStack)) {
             return result;
         }*/
@@ -134,9 +136,9 @@ public class ItemOverstackUtils {
         }
     }
 
-/*    private static class ShulkerBox implements ItemUtil {
+    private static class ShulkerBox implements ItemUtil {
         public static boolean shulkerBoxCheck(@NotNull ItemStack stack1, @NotNull ItemStack stack2) {
-            if (LeavesConfig.modify.shulkerBox.sameNbtStackable) {
+            if (ContainerExpansionConfig.nbtShulkerStackable) {
                 return Objects.equals(stack1.getComponents(), stack2.getComponents());
             }
             return shulkerBoxNoItem(stack1) && shulkerBoxNoItem(stack2) && Objects.equals(stack1.getComponents(), stack2.getComponents());
@@ -148,24 +150,24 @@ public class ItemOverstackUtils {
 
         @Override
         public boolean isEnabled() {
-            return LeavesConfig.modify.shulkerBox.shulkerBoxStackSize > 1;
+            return ContainerExpansionConfig.shulkerCount > 1;
         }
 
         @Override
         public boolean tryStackItems(ItemEntity self, ItemEntity other) {
             ItemStack selfStack = self.getItem();
             if (!isEnabled() ||
-                !(selfStack.getItem() instanceof BlockItem blockItem) ||
-                !(blockItem.getBlock() instanceof ShulkerBoxBlock)
+                    !(selfStack.getItem() instanceof BlockItem blockItem) ||
+                    !(blockItem.getBlock() instanceof ShulkerBoxBlock)
             ) {
                 return false;
             }
 
             ItemStack otherStack = other.getItem();
             if (selfStack.getItem() == otherStack.getItem()
-                && shulkerBoxCheck(selfStack, otherStack)
-                && selfStack.getCount() != org.leavesmc.leaves.LeavesConfig.modify.shulkerBox.shulkerBoxStackSize) {
-                int amount = Math.min(otherStack.getCount(), org.leavesmc.leaves.LeavesConfig.modify.shulkerBox.shulkerBoxStackSize - selfStack.getCount());
+                    && shulkerBoxCheck(selfStack, otherStack)
+                    && selfStack.getCount() != ContainerExpansionConfig.shulkerCount) {
+                int amount = Math.min(otherStack.getCount(), ContainerExpansionConfig.shulkerCount - selfStack.getCount());
 
                 selfStack.grow(amount);
                 self.setItem(selfStack);
@@ -187,14 +189,15 @@ public class ItemOverstackUtils {
         @Override
         public int getMaxServerStackCount(ItemStack stack) {
             if (isEnabled() && stack.getItem() instanceof BlockItem bi &&
-                bi.getBlock() instanceof ShulkerBoxBlock && (LeavesConfig.modify.shulkerBox.sameNbtStackable || shulkerBoxNoItem(stack))) {
-                return LeavesConfig.modify.shulkerBox.shulkerBoxStackSize;
+                    bi.getBlock() instanceof ShulkerBoxBlock && (ContainerExpansionConfig.nbtShulkerStackable || shulkerBoxNoItem(stack))) {
+                return ContainerExpansionConfig.shulkerCount;
             }
             return -1;
         }
     }
 
-    public static class CurseEnchantedBook implements ItemUtil {
+// only use shulker box part
+/*    public static class CurseEnchantedBook implements ItemUtil {
         public static boolean isCursedEnchantedBook(ItemStack stack) {
             ItemEnchantments enchantments = stack.getBukkitStack().getData(DataComponentTypes.STORED_ENCHANTMENTS);
             if (enchantments == null || enchantments.enchantments().size() != 1) {
